# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-08-10T02:48:28+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, RootModel


class Link(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    title: Optional[str] = None
    url: str


class MediaType(Enum):
    photo = 'photo'
    video = 'video'
    gif = 'gif'


class Media(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    alt: Optional[str] = None
    height: Optional[float] = None
    media_type: MediaType
    preview_url: Optional[str] = None
    url: str
    width: Optional[float] = None


class Tweet(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    author_handle: str
    author_user_id: Optional[str] = None
    created_at: Optional[str] = None
    html: Optional[str] = None
    is_reply: bool
    is_retweet: bool
    links: List[Link]
    media: List[Media]
    quoted_status_url: Optional[str] = None
    text: str
    tweet_id: str


class TwitterParsingStats(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links_extracted: float
    media_extracted: float
    parsing_time_ms: float
    scroll_passes: float
    tweets_found: float


class ThreadExtract(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    author_handle: str
    author_user_id: Optional[str] = None
    root_tweet_id: str
    tweets: List[Tweet]


class TwitterBackendPayload(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    extracted: ThreadExtract
    page_title: str
    stats: Optional[TwitterParsingStats] = None
    url: str


class Model(RootModel[TwitterBackendPayload]):
    root: TwitterBackendPayload
